// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: uplink.proto

package uplink_provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UplinkServiceClient is the client API for UplinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UplinkServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (UplinkService_UploadClient, error)
}

type uplinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUplinkServiceClient(cc grpc.ClientConnInterface) UplinkServiceClient {
	return &uplinkServiceClient{cc}
}

func (c *uplinkServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (UplinkService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &UplinkService_ServiceDesc.Streams[0], "/uplink.UplinkService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &uplinkServiceUploadClient{stream}
	return x, nil
}

type UplinkService_UploadClient interface {
	Send(*UploadArgs) error
	CloseAndRecv() (*UploadReturn, error)
	grpc.ClientStream
}

type uplinkServiceUploadClient struct {
	grpc.ClientStream
}

func (x *uplinkServiceUploadClient) Send(m *UploadArgs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uplinkServiceUploadClient) CloseAndRecv() (*UploadReturn, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadReturn)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UplinkServiceServer is the server API for UplinkService service.
// All implementations must embed UnimplementedUplinkServiceServer
// for forward compatibility
type UplinkServiceServer interface {
	Upload(UplinkService_UploadServer) error
	mustEmbedUnimplementedUplinkServiceServer()
}

// UnimplementedUplinkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUplinkServiceServer struct {
}

func (UnimplementedUplinkServiceServer) Upload(UplinkService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedUplinkServiceServer) mustEmbedUnimplementedUplinkServiceServer() {}

// UnsafeUplinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UplinkServiceServer will
// result in compilation errors.
type UnsafeUplinkServiceServer interface {
	mustEmbedUnimplementedUplinkServiceServer()
}

func RegisterUplinkServiceServer(s grpc.ServiceRegistrar, srv UplinkServiceServer) {
	s.RegisterService(&UplinkService_ServiceDesc, srv)
}

func _UplinkService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UplinkServiceServer).Upload(&uplinkServiceUploadServer{stream})
}

type UplinkService_UploadServer interface {
	SendAndClose(*UploadReturn) error
	Recv() (*UploadArgs, error)
	grpc.ServerStream
}

type uplinkServiceUploadServer struct {
	grpc.ServerStream
}

func (x *uplinkServiceUploadServer) SendAndClose(m *UploadReturn) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uplinkServiceUploadServer) Recv() (*UploadArgs, error) {
	m := new(UploadArgs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UplinkService_ServiceDesc is the grpc.ServiceDesc for UplinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UplinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uplink.UplinkService",
	HandlerType: (*UplinkServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _UplinkService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "uplink.proto",
}
